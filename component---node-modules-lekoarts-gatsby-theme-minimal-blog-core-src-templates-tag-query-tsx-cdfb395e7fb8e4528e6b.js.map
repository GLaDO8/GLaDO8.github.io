{"version":3,"sources":["webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/tag.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/tag-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/tag.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"names":["Tag","posts","pageContext","useMinimalBlogConfig","tagsPath","basePath","title","name","sx","alignItems","justifyContent","flexFlow","variant","as","Link","to","replaceSlashes","mt","TagComponent","data","allPost","nodes","query","ItemTags","tags","Fragment","map","tag","i","key","slug","a","BlogListItem","post","showTags","mb","fontSize","color","date","Listing","className"],"mappings":"+QAgDeA,EAjBH,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAA4B,EACjBC,cAAvBC,EADwC,EACxCA,SAAUC,EAD8B,EAC9BA,SAElB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKC,MAAK,QAAUJ,EAAYK,OAChC,YAAC,IAAD,CAAMC,GAAI,CAAEC,WAAY,SAAUC,eAAgB,gBAAiBC,SAAU,SAC3E,YAAC,IAAD,CAASC,QAAQ,aAAaV,EAAYK,MAC1C,YAAC,IAAD,CAAOM,GAAIC,OAAMN,GAAI,CAAEI,QAAS,mBAAqBG,GAAIC,YAAe,IAAIX,EAAL,IAAiBD,IAAxF,kBAIF,YAAC,IAAD,CAASH,MAAOA,EAAOO,GAAI,CAAES,GAAI,CAAC,EAAG,QCxC5BC,UCQA,YAA0D,IAA5BC,EAA4B,EAA5BA,KAAMjB,EAAsB,EAAtBA,YACzCkB,EAAYD,EAAZC,QAER,OAAO,kBAAC,EAAD,CAAKnB,MAAOmB,EAAQC,MAAOnB,YAAaA,KDXlCgB,IAEFI,EAAQ,Y,qHEyBNC,IAjBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACVrB,cAAvBC,EADiC,EACjCA,SAAUC,EADuB,EACvBA,SAElB,OACC,kBAAC,IAAMoB,SAAP,KACED,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACT,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACrBF,GAAF,KACD,kBAAC,IAAOG,EAAR,CAAUlB,GAAIC,OAAMC,GAAIC,YAAe,IAAIX,EAAL,IAAiBD,EAAjB,IAA6BuB,EAAIG,OACrEH,EAAIpB,a,yHCiBIyB,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACpB,YAAC,IAAD,CAAKC,GAAI,GACR,YAAC,IAAOJ,EAAR,CAAUlB,GAAIC,OAAMC,GAAIkB,EAAKH,KAAMtB,GAAI,CAAE4B,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SACnEJ,EAAK3B,OAEP,iBAAGE,GAAI,CAAE6B,MAAO,YAAapB,GAAI,EAAGc,EAAG,CAAEM,MAAO,aAAeD,SAAU,CAAC,EAAG,EAAG,KAC/E,wBAAOH,EAAKK,MACXL,EAAKT,MAAQU,GACb,YAAC,IAAMT,SAAP,WAEC,YAAC,IAAD,CAAUD,KAAMS,EAAKT,WCHXe,IARC,SAAC,GAAD,IAAGtC,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,UAAV,IAAqBN,gBAArB,gBACd,uBAAS1B,GAAI,CAAE2B,GAAI,CAAC,EAAG,EAAG,IAAMK,UAAWA,GACxCvC,EAAMyB,KAAI,SAACO,GAAD,OACT,YAAC,EAAD,CAAcJ,IAAKI,EAAKH,KAAMG,KAAMA,EAAMC,SAAUA","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-tag-query-tsx-cdfb395e7fb8e4528e6b.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading variant=\"styles.h2\">{pageContext.name}</Heading>\n        <TLink as={Link} sx={{ variant: `links.secondary` }} to={replaceSlashes(`/${basePath}/${tagsPath}`)}>\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\nexport default Tag\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Tag from \"../../../components/tag\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: any\n}\n\nexport default function MinimalBlogCoreTag({ data, pageContext }: Props) {\n  const { allPost } = data\n\n  return <Tag posts={allPost.nodes} pageContext={pageContext} />\n}\n","import React from \"react\"\nimport { Styled } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n\ttags: {\n\t\tname: string\n\t\tslug: string\n\t}[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n\tconst { tagsPath, basePath } = useMinimalBlogConfig()\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{tags.map((tag, i) => (\n\t\t\t\t<React.Fragment key={tag.slug}>\n\t\t\t\t\t{!!i && `, `}\n\t\t\t\t\t<Styled.a as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n\t\t\t\t\t\t{tag.name}\n\t\t\t\t\t</Styled.a>\n\t\t\t\t</React.Fragment>\n\t\t\t))}\n\t\t</React.Fragment>\n\t)\n}\n\nexport default ItemTags","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Styled } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n\tpost: {\n\t\tslug: string\n\t\ttitle: string\n\t\tdate: string\n\t\tentry: string\n\t\tdescription?: string\n\t\ttags?: {\n\t\t\tname: string\n\t\t\tslug: string\n\t\t}[]\n\t}\n\tshowTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n\t<Box mb={5}>\n\t\t<Styled.a as={Link} to={post.slug} sx={{ fontSize: [2, 2, 3], color: `text` }}>\n\t\t\t{post.title}\n\t\t</Styled.a>\n\t\t<p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n\t\t\t<time>{post.date}</time>\n\t\t\t{post.tags && showTags && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t{` â€” `}\n\t\t\t\t\t<ItemTags tags={post.tags} />\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</p>\n\t</Box>\n)\n\nexport default BlogListItem","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"sourceRoot":""}